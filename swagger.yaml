openapi: 3.0.0
info:
  title: Bundle API
  description: API suite for interacting with entities associated with the Selective Deployment of assets from a source domain to a target domain
  version: 0.1.0

paths:
  /solutions:
    get:
      tags:
        - Solutions
      summary: Reads all solutions
      description: Returns a list of all solutions, including related applications and templates
      parameters:
        - $ref: '#/components/parameters/StatusQueryParam'
        - $ref: '#/components/parameters/DivisionIdQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/SolutionsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - Solutions
      summary: Creates a new solution
      description: Creates a new solution from the provided data. Applications are added in a separate call. Returns the full solution object created
      requestBody:
        $ref: '#/components/requestBodies/SolutionRequest'
      responses:
        '201':
          allOf:
            - $ref: '#/components/responses/SolutionResponse'
            - description: The solution object created
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /solutions/{solutionId}:
    get:
      tags:
        - Solutions
      summary: Returns a single solution
      description: Returns the solution represented by the given ID
      parameters:
        - $ref: '#/components/parameters/SolutionIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/SolutionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    put:
      tags:
        - Solutions
      summary: Updates a solution
      description: Replaces the existing solution represented by the ID with the new data
      requestBody:
        $ref: '#/components/requestBodies/SolutionRequest'
      responses:
        '200':
          $ref: '#/components/responses/SolutionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    delete:
      tags:
        - Solutions
      summary: Deletes a solution
      description: Soft-deletes the solution specified by the given ID, and soft-cascade-deletes any applications and templates associated with it. A solution with existing implementations cannot be deleted. 
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /solutions/{solutionId}/applications:
    get:
      tags:
        - Applications
      summary: Reads all applications for a solution
      description: Returns a list of all applications associated with the specified solution, including template data
      parameters:
        - $ref: '#/components/parameters/SolutionIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - Applications
      summary: Adds an application to a solution
      description: Creates a new application associated with the solution represented by `solutionId`. 
      parameters:
        - $ref: '#/components/parameters/SolutionIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/ApplicationRequest'
      responses:
        '201':
          $ref: '#/components/responses/ApplicationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /applications/{applicationId}:
    get:
      tags:
        - Applications
      summary: Returns the details of a single application
      description: Retrieves version and related template data for the application represented by `applicationId`
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/ApplicationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    delete:
      tags:
        - Applications
      summary: Deletes a single application
      description: Soft-deletes the application specified by `applicationId`, and soft-cascade-deletes any versions or templates associated with it. An application with existing implementations cannot be deleted.
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /applications/{applicationId}/versions:
    get:
      tags:
        - Applications
      summary: Reads all versions of a single application
      description: Returns a list of detail objects for all versions of an application, including data regarding the templates associated with each version
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
      responses:
        '200':
          description: A response object representing a list of application versions, including associated templates
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    versionKey:
                      type: string
                    versionName:
                      type: string
                    templates:
                      type: array
                      items:
                        type: string
                        pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - Applications
      summary: Creates a new version of a single application
      description: Accepts an object representing a new version of the application represented by `applicationId`, including the templates associated with the version
      requestBody:
        description: A request object representing the new application version, including templates
        content:
          application/json:
            schema:
              type: object
              properties:
                versionKey:
                  type: string
                versionName:
                  type: string
                templates:
                  type: array
                  items:
                    type: string
                    pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
      responses:
        '201':
          description: A response object representing the application version created
          content:
            application/json:
              schema:
                type: object
                properties:
                  solutionName:
                    type: string
                  applicationName:
                    type: string
                  applicationShortCode:
                    type: string
                  versionKey:
                    type: string
                  versionName:
                    type: string
                  templates:
                    type: array
                    items:
                      type: string
                      pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /applications/{applicationId}/versions/{versionKey}:
    get:
      tags:
        - Applications
      summary: Reads a single version of the specified application
      description: Returns the details of the version specified by `versionKey`, which is unique for a single application. Includes templates associated with the application version
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
        - $ref: '#/components/parameters/VersionKeyPathParam'
      responses:
        '200':
          description: A response object representing a single version of an application, including templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  solutionName:
                    type: string
                  applicationName:
                    type: string
                  applicationShortCode:
                    type: string
                  versionKey:
                    type: string
                  versionName:
                    type: string
                  templates:
                    type: array
                    items:
                      type: string
                      pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    delete:
      tags:
        - Applications
      summary: Deletes a single version of an application
      description: For the application represented by `applicationId`, soft-deletes the version represented by `versionKey`, and soft-cascade-deletes any associated templates. This operation is not permitted if there are existing implementations of the application version.
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
        - $ref: '#/components/parameters/VersionKeyPathParam'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /applications/{applicationId}/versions/{versionKey}/templates:
    get:
      tags:
        - Templates
      summary: Returns all templates associated with a single version of an application
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
        - $ref: '#/components/parameters/VersionKeyPathParam'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - Templates
      summary: Adds a template to a version of an application
      parameters:
        - $ref: '#/components/parameters/ApplicationIdPathParam'
        - $ref: '#/components/parameters/VersionKeyPathParam'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        '201':
          description: A response object representing the created template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /templates/{templateId}:
    delete:
      tags:
        - Templates
      summary: Deletes a single template
      description: A template declares a source asset to be bundled in a version of an application. This endpoint will soft-delete the template, removing the associated asset from the application version. This is not permitted if there are existing implementations of the template.
      parameters:
        - $ref: '#/components/parameters/TemplateIdPathParam'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /solution_implementations:
    get:
      tags:
        - Implementations
      summary: Lists all implementations
      responses:
        '200':
          description: A response object representing a list of all solution implementations
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    post:
      tags:
        - Implementations
      summary: Creates a new implementation of a solution, along with related application and template implementations.
      requestBody:
        description: >
          `solutionId` selects the solution to deploy. `targetDomainId` selects the domain to which to deploy assets. `applicationVersions` must be a mapping of applicationId to applicationVersionKey, and this will selected which version of each application to deploy. If any application in the solution is excluded from this mapping, the most recent active version will be deployed.
        content:
          application/json:
            schema:
              type: object
              properties:
                solutionId:
                  type: integer
                targetDomainId:
                  type: integer
                applicationVersions:
                  type: object
                  additionalProperties: true
                  example:
                    13: 'V1'
                    14: 'V3'
      responses:
        '201':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /solution_implementations/{implementationId}:
    get:
      tags:
        - Implementations
      summary: Reads a single implementation
      description: Retrieves data regarding the implementation of a solution, including which application versions are included and what the status of each template implementation is
      parameters:
        - $ref: '#/components/parameters/ImplementationIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/GetImplementationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
    delete:
      tags:
        - Implementations
      summary: Deletes an implementation stack
      description: Deletes a solution implementation, along with associated application implementations and template implementations. At the asset level, this will only disassociate the target assets that have already been deployed from the source assets. It will not delete the deployed assets from the target domain. To clean up already-deployed assets from the target domain, the `/solutionImplementations/{implementationId}/cleanup` endpoint should be used after deleting 
      parameters:
        - $ref: '#/components/parameters/ImplementationIdPathParam'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error
  /solution_implementations/{implementationId}/cleanup:
    post:
      tags:
        - Implementations
      summary: Removes deployed assets associated with an implementation
      description: For the implementation represented by `implementationId`, deletes deployed assets from the target domain
      parameters:
        - $ref: '#/components/parameters/ImplementationIdPathParam'
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '500':
          description: Internal server error

components:
  schemas:
    Solution:
      type: object
      properties:
        name:
          type: string
        division_id:
          type: integer
        status:
          type: string
          enum: [active, inactive]
    Application:
      type: object
      properties:
        solutionId:
          type: integer
        name:
          type: string
        shortCode:
          type: string
        sourceDomainId:
          type: integer
    ApplicationVersion:
      type: object
      properties:
        applicationId:
          type: integer
        versionKey:
          type: string
        versionName:
          type: string
        status:
          type: string
          enum: [active, inactive]
        templates:
          $ref: '#/components/schemas/Template'
    Template:
      type: object
      properties:
        applicationVersionId:
          type: integer
        sourceDomainId:
          type: integer
        sourceUid:
          type: string
          pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
  parameters:
    SolutionIdPathParam:    
      name: solutionId
      in: path
      description: Solution ID
      required: true
      schema:
        type: integer
    ApplicationIdPathParam:
      name: applicationId
      in: path
      description: Application ID
      required: true
      schema:
        type: integer
    TemplateIdPathParam:
      name: templateId
      in: path
      description: Template ID
      required: true
      schema:
        type: integer
    VersionKeyPathParam:
      name: versionKey
      in: path
      description: Version Key (unique for a single application)
      required: true
      schema:
        type: string
    ImplementationIdPathParam:
      name: implementationId
      in: path
      description: Implementation ID
      required: true
      schema:
        type: integer
    StatusQueryParam:
      name: status
      in: query
      description: Status filter
      required: false
      schema:
        type: string
        enum: [active, inactive]
    DivisionIdQueryParam:
      name: divisionId
      in: query
      description: Division ID filter
      required: false
      schema:
        type: integer
  requestBodies:
    SolutionRequest:
      description: An object representing the solution to be created.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Solution'
    ApplicationRequest:
      description: An object representing the application to be created. Should include `applicationId` only if this is a new version of an existing application
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              shortCode:
                type: string
              sourceDomainId:
                type: integer
              applicationId:
                type: integer
              versionKey:
                type: string
              versionName:
                type: string
              templates:
                type: array
                items:
                  type: string
                  pattern: '^[a-z0-9]{4}-[a-z0-9]{4}$'
  responses:
    UnauthorizedResponse:
      description: Unauthorized– Invalid credentials
    ForbiddenResponse:
      description: Forbidden– User does not have sufficient permissions
    SolutionResponse:
      description: An response object describing a single solution, including data regarding applications and templates
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Solution'
              - type: object
                properties:
                  id: 
                    type: integer
                  applications:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Application'
                        - type: object
                          properties:
                            versions:
                              type: array
                              items:
                                $ref: '#/components/schemas/ApplicationVersion'
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
    SolutionsResponse:
      description: A response object describing a list of solutions, including data regarding applications and templates
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/Solution'
                - type: object
                  properties:
                    id: 
                      type: integer
                    applications:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/Application'
                          - type: object
                            properties:
                              versions:
                                type: array
                                items:
                                  $ref: '#/components/schemas/ApplicationVersion'
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
    ApplicationResponse:
      description: A response object describing a single application, including data regarding versions and templates
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Application'
              - type: object
                properties:
                  solutionName:
                    type: string
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationVersion'
    ApplicationsResponse:
      description: A response object describing a list of applications, including data regarding versions and templates
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/components/schemas/Application'
                - type: object
                  properties:
                    solutionName:
                      type: string
                    versions:
                      type: array
                      items:
                        $ref: '#/components/schemas/ApplicationVersion'
    GetImplementationResponse:
      description: A response object representing the implementation of a solution on a target domain, including deployed application versions and templates
      content:
        application/json:
          schema:
            type: object
            properties:
              targetDomainId:
                type: integer
              targetDomainCName:
                type: string
              solutionId:
                type: integer
              solutionName:
                type: string
              applications:
                type: array
                items:
                  type: object
                  properties:
                    applicationId:
                      type: integer
                    applicationName:
                      type: string
                    applicationShortCode:
                      type: string
                    applicationVersionKey:
                      type: string
                    applicationVersionName:
                      type: string
                    applicationSourceDomainId:
                      type: integer
                    applicationSourceDomainCName:
                      type: string
                    status:
                      type: string
                      enum: [active, inactive]
                    templates:
                      type: array
                      items:
                        type: object
                        properties:
                          sourceAssetUid:
                            type: string
                          sourceAssetName:
                            type: string
                          sourceDomainId:
                            type: integer
                          sourceDomainCName:
                            type: string
                          targetAssetUid:
                            type: string
                          status:
                            type: string
                            enum: [requested, pending, completed, failed]
                          statusReason:
                            type: string
